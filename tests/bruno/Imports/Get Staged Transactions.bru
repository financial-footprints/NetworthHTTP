meta {
  name: Get Staged Transactions
  type: http
  seq: 6
}

get {
  url: {{BASEURL}}/api/v1/import/{{importId}}/transactions
  body: none
  auth: none
}

vars:pre-request {
  importId: {{TEST_IMPORT_ID}}
  transactionId: {{TEST_TRANSACTION_ID}}
}

assert {
  res.status: eq 200
}

tests {
  test("response should contain correct transaction details", () => {
    expect(res.body).to.be.an('array').with.lengthOf(2);

    const transaction1 = res.body[0];
    const transaction2 = res.body[1];

    expect(transaction1).to.have.property('id').that.matches(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);
    expect(transaction1).to.have.property('import_id').that.equals(bru.getEnvVar("TEST_IMPORT_ID"));
    expect(transaction1).to.have.property('amount').that.equals('-50000');
    expect(transaction1).to.have.property('date').that.equals('0023-04-01T00:00:00');
    expect(transaction1).to.have.property('description').that.equals('Test1');

    expect(transaction1).to.have.property('id').that.matches(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);
    expect(transaction2).to.have.property('import_id').that.equals(bru.getEnvVar("TEST_IMPORT_ID"));
    expect(transaction2).to.have.property('amount').that.equals('5000');
    expect(transaction2).to.have.property('date').that.equals('0024-04-01T00:00:00');
    expect(transaction2).to.have.property('description').that.equals('Test2');

    bru.setEnvVar("TEST_STAGING_TRANSACTION_ID", res.body[0].id);
  });
}

docs {
  Retrives all transactions for the import. (With limit and offset)
}
