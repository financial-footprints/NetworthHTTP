meta {
  name: Get Staged Transactions
  type: http
  seq: 9
}

post {
  url: {{BASEURL}}/api/v1/import/{{importId}}/transactions
  body: json
  auth: none
}

body:json {
  {
    "sort": {},
    "filter": {
      "import_id": "{{TEST_IMPORT_ID}}"
    }
  }
}

vars:pre-request {
  importId: {{TEST_IMPORT_ID}}
  transactionId: {{TEST_TRANSACTION_ID}}
}

assert {
  res.status: eq 200
}

tests {
  test("response should contain correct transaction details", () => {
    expect(res.body).to.be.an('array').with.lengthOf(2);
  
    const transaction1 = res.body[0];
    const transaction2 = res.body[1];
    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;
  
    expect(transaction1).to.have.property('id').that.matches(uuidRegex);
    expect(transaction1).to.have.property('import_id').that.equals(bru.getEnvVar("TEST_IMPORT_ID"));
    expect(transaction1).to.have.property('amount').that.equals(5000);
    expect(transaction1).to.have.property('date').that.equals('0024-04-01T00:00:00');
    expect(transaction1).to.have.property('balance').that.equals(55000);
    expect(transaction1).to.have.property('ref_no').that.equals('000000000000000');
    expect(transaction1).to.have.property('description').that.equals('Test2');
    expect(transaction1).to.have.property('sequence_number').that.equals(2);
  
    expect(transaction2).to.have.property('id').that.matches(uuidRegex);
    expect(transaction2).to.have.property('import_id').that.equals(bru.getEnvVar("TEST_IMPORT_ID"));
    expect(transaction2).to.have.property('amount').that.equals(-50000);
    expect(transaction2).to.have.property('date').that.equals('0023-04-01T00:00:00');
    expect(transaction2).to.have.property('balance').that.equals(50000);
    expect(transaction2).to.have.property('ref_no').that.equals('0000001123');
    expect(transaction2).to.have.property('description').that.equals('Test1');
    expect(transaction2).to.have.property('sequence_number').that.equals(1);
  
    bru.setEnvVar("TEST_STAGING_TRANSACTION_ID", transaction2.id);
  });
}

docs {
  Retrives all transactions for the import. (With limit and offset)
}
